=====================
Scripting MySQL Proxy
=====================

Tutorial
========

Commands passing by
-------------------

.. literalinclude:: ../examples/tutorial-basic.lua
  :language: lua
  :linenos:
  :lines: 26-

Rewriting packets
-----------------

.. literalinclude:: ../examples/tutorial-rewrite.lua
  :language: lua
  :linenos:
  :lines: 26-

Decoding Prepared Statements
----------------------------

.. literalinclude:: ../examples/tutorial-prep-stmts.lua
  :language: lua
  :linenos:
  :lines: 21-

Hooks
=====

connect_server
--------------

.. js:function:: connect_server()

  :returns: proxy.PROXY_SEND_RESULT

read_auth
---------

.. js:function:: read_auth()

  :returns: proxy.PROXY_SEND_RESULT


read_auth_result
----------------

.. js:function:: read_auth_result(path)

  :returns: proxy.PROXY_SEND_RESULT

read_query
----------

.. js:function:: read_auth(packet)

  :param string packet: the command packet
  :returns: proxy.PROXY_SEND_RESULT



read_query_result
-----------------

.. js:function:: read_query_result(inj)

  :param string packet: the command packet
  :returns: proxy.PROXY_SEND_RESULT

disconnect_client
-----------------

.. js:function:: read_query_result(inj)

  :param string packet: the command packet
  :returns: proxy.PROXY_SEND_RESULT


Modules
=======

.. index:: 
  module: mysql.proto

mysql.proto
-----------

The ``mysql.proto`` module provides encoders and decoders for the packets exchanged between client and server


.. js:function:: from_err_packet(packet)

  Decodes a ERR-packet into a table.

  :param string packet: mysql packet
  :throws: an error
  :returns: a table

    ``errmsg`` (string)
    
    ``sqlstate`` (string)
    
    ``errcode`` (int)


.. js:function:: to_err_packet(err)

  Encode a table containing a ERR packet into a MySQL packet.
  
  :param table err:
  
    ``errmsg`` (string)
    
    ``sqlstate`` (string)
    
    ``errcode`` (int)
  
  :returns: Returns a string.

.. js:function:: from_ok_packet(packet)

  Decodes a OK-packet

  :param string packet: mysql packet
  :throws: an error
  :returns: table:

    ``server_status`` (int) bit-mask of the connection status
    
    ``insert_id`` (int) last used insert id
    
    ``warnings`` (int) number of warnings for the last executed statement
    
    ``affected_rows`` (int) rows affected by the last statement


.. js:function:: to_ok_packet(ok)

  Encode a OK packet

.. js:function:: from_eof_packet(packet)

  Decodes a EOF-packet
  
  :param string packet: mysql packet
  :throws: an error
  :returns: table

    ``server_status``
      (int) bit-mask of the connection status
    
    ``warnings``
      (int)
  

.. js:function:: to_eof_packet(eof)

  Encode a EOF packet into a string

.. js:function:: from_challenge_packet(packet)

  Decodes a auth-challenge-packet
  
  :param string packet: mysql packet
  :throws: an error
  :returns: table

    ``protocol_version``
      (int) version of the mysql protocol, usually 10
    
    ``server_version``
      (int) version of the server as integer: 50506 is MySQL 5.5.6
    
    ``thread_id``
      (int) connection id
    
    ``capabilities``
      (int) bit-mask of the server capabilities
    
    ``charset``
      (int) server default character-set
    
    ``server_status``
      (int) bit-mask of the connection-status
    
    ``challenge``
      (string) password challenge


.. js:function:: to_challenge_packet

  Encode a auth-response-packet

.. js:function:: from_response_packet

  Decodes a auth-response-packet
  
  :param string packet: mysql packet
  :throws: an error
  :returns: table

.. js:function:: to_response_packet

  Encode a Auth Response packet

.. js:function:: from_masterinfo_string

  Decodes the content of the ``master.info`` file.


.. js:function:: to_masterinfo_string

  Encode a table into the content of ``master.info`` file

.. js:function:: from_stmt_prepare_packet

  Decodes a COM_STMT_PREPARE-packet
  
  :param string packet: mysql packet
  :throws: an error
  :returns: a table containing

    ``stmt_text`` (string)
      text of the prepared statement
  
.. js:function:: from_stmt_prepare_ok_packet

  Decodes a :ref:`com_stmt_prepare_ok_packet`
  
  :param string packet: mysql packet
  :throws: an error
  :returns: table
  
    ``stmt_id`` (int)
      statement-id
    
    ``num_columns`` (int)
      number of columns in the resultset
    
    ``num_params`` (int)
      number of parameters
    
    ``warnings`` (int)
      warnings generated by the prepare statement

.. js:function:: from_stmt_execute_packet(packet, num_params)

  Decodes a COM_STMT_EXECUTE-packet
  
  :param string packet: mysql packet
  :param int num_params: number of parameters of the corresponding prepared statement
  
  :returns: table
  
    ``stmt_id`` (int)
      statement-id
    
    ``flags`` (int)
      flags describing the kind of cursor used
    
    ``iteration_count`` (int)
      iteration count: always 1
    
    ``new_params_bound`` (bool) 
    
    ``params`` (nil, table)
      number-index array of parameters if ``new_params_bound`` is ``true``
  
      Each param is a table of:
      
      ``type`` (int)
        MYSQL_TYPE_INT, MYSQL_TYPE_STRING ... and so on
      
      ``value`` (nil, number, string)
        if the value is a NULL, it ``nil``
        if it is a number (_INT, _DOUBLE, ...) it is a ``number``
        otherwise it is a ``string``
  
  If decoding fails it raises an error.
  
  To get the ``num_params`` for this function, you have to track the track the number of parameters as returned
  by the :js:func:`from_stmt_prepare_ok_packet`. Use js:func:`stmt_id_from_stmt_execute_packet` to get the ``statement-id`` from
  the COM_STMT_EXECUTE packet and lookup your tracked information.

  .. seealso::
  
    Example `Decoding Prepared Statements`_
       Example how to use :js:func:`stmt_id_from_stmt_execute_packet`

    :js:func:`stmt_id_from_stmt_execute_packet`
       How to get the statement id 
 
.. js:function:: stmt_id_from_stmt_execute_packet(packet)

  Decodes statement-id from a COM_STMT_EXECUTE-packet
  
  :param string packet: mysql packet
  :throws: an error
  :returns: the ``statement-id`` as ``int``

  .. seealso::
  
    Example `Decoding Prepared Statements`_
       Example how to use :js:func:`stmt_id_from_stmt_execute_packet`
  
.. js:function:: from_stmt_close_packet

  Decodes a COM_STMT_CLOSE-packet
  
  :param string packet: mysql packet
  :throws: an error
  :returns: On success it returns a table containing:
    ``stmt_id`` (int) statement-id that shall be closed

  


